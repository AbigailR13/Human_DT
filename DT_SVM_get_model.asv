

function DT_SVM_get_model(test_nums_all)

    model_nums = "";
    MAD_slopes_con = [];
    EDA_avgs_con = [];
    port_avgs_con = [];
    HR_avgs_con = [];
    classes_con = [];
    
    % concatenate training data from all desired trials
    for i = 1:test_nums_all
        test_nums = test_nums_all{i};
        model_num = test_nums(1);
        model_nums = model_nums + model_num;
        
        % leave control data: 0
        % subtract off control: 1
        % remove control data: 2
        control = 1; 
        
        % include heart rate
        HR = 1;
        
        % load data from files and put in proper form
        [MAD_slopes_all,MAD_slopes_times,EDA_avgs_all,EDA_avgs_times,port_avgs_all,port_avgs_times,HR_avgs_all,HR_avgs_times,phys_states,end_times,classes,end_time_control] = get_data(test_nums,HR,single);
        
        % make sure all data is the same length
        data_length = min([size(MAD_slopes_all,2), size(EDA_avgs_all,2),size(port_avgs_all,2)]);
        if HR
            data_length = min([size(MAD_slopes_all,2), size(EDA_avgs_all,2),size(port_avgs_all,2),size(HR_avgs_all,2)]);
        end
        MAD_slopes_all = MAD_slopes_all(1:data_length);
        MAD_slopes_times = MAD_slopes_times(1:data_length);
        EDA_avgs_all = EDA_avgs_all(1:data_length);
        EDA_avgs_times = EDA_avgs_times(1:data_length);
        port_avgs_all = port_avgs_all(1:data_length);
        port_avgs_times = port_avgs_times(1:data_length);
        classes = classes(1:data_length);
        if HR
            HR_avgs_all = HR_avgs_all(1:data_length);
            HR_avgs_times = HR_avgs_times(1:data_length);
        end
        
        % deal with resting control period
        if control == 1
            % subtracting off resting control averages from all data
            [MAD_slopes_all,EDA_avgs_all,port_avgs_all,HR_avgs_all,MAD_slopes_times,EDA_avgs_times,port_avgs_times,HR_avgs_times,classes] = control_avgs(MAD_slopes_all,MAD_slopes_times,EDA_avgs_all,EDA_avgs_times,port_avgs_all,port_avgs_times,HR_avgs_all,HR_avgs_times,end_time_control,HR,classes);
        elseif control == 2
            % remove resting control period data
            [MAD_slopes_all,EDA_avgs_all,port_avgs_all,HR_avgs_all,MAD_slopes_times,EDA_avgs_times,port_avgs_times,HR_avgs_times,classes] = remove_control(MAD_slopes_all,MAD_slopes_times,EDA_avgs_all,EDA_avgs_times,port_avgs_all,port_avgs_times,HR_avgs_all,HR_avgs_times,end_time_control,HR,classes);
        end
        
        % concatenate data
        MAD_slopes_con = [MAD_slopes_con,MAD_slopes_all];
        EDA_avgs_con = [EDA_avgs_con,EDA_avgs_all];
        port_avgs_con = [port_avgs_con,port_avgs_all];
        HR_avgs_con = [HR_avgs_con,HR_avgs_all];
        classes_con = [classes_con,classes];
    end
    
    % put all data for training in matrix (data)
    data = [port_avgs_con;EDA_avgs_con;MAD_slopes_con;HR_avgs_con]';
    
    
    rng('default');
    scale = '';

    % get SVM Model
    SVMModel = fitcsvm(data,classes','KernelFunction','rbf',...
        'Standardize',true,'ClassNames',{'1','2'});
    
    % save model to .mat file
    save(strcat('SVM_test_',model_num,'_model_',string(control),'_pemh_',scale,'.mat'),'SVMModel');
    
    % test model on training data
    [label,score] = predict(SVMModel,data);
    
    preds = zeros(size(label));
    for i = 1:size(label)
        preds(i) = str2double(label{i});
    end
    
    % get percent data correcly classified of training data
    num_incorrect = sum(preds == classes');
    total = size(preds,1);
    percent_correct_1 = 1-(num_incorrect)/total;
    percent_correct_2 = (num_incorrect)/total;
    percent_correct = max(percent_correct_2,percent_correct_1)


    % test model on training data
    [label,score] = predict(SVMModel,data_1);
    
    preds = zeros(size(label));
    for i = 1:size(label)
        preds(i) = str2double(label{i});
    end
    
    % get percent data correcly classified of training data
    num_incorrect = sum(preds == classes_10');
    total = size(preds,1);
    percent_correct_1 = 1-(num_incorrect)/total;
    percent_correct_2 = (num_incorrect)/total;
    percent_correct = max(percent_correct_2,percent_correct_1)

    % test model on training data
    [label,score] = predict(SVMModel,data_2);
    
    preds = zeros(size(label));
    for i = 1:size(label)
        preds(i) = str2double(label{i});
    end
    
    % get percent data correcly classified of training data
    num_incorrect = sum(preds == classes_20');
    total = size(preds,1);
    percent_correct_1 = 1-(num_incorrect)/total;
    percent_correct_2 = (num_incorrect)/total;
    percent_correct = max(percent_correct_2,percent_correct_1)
end
