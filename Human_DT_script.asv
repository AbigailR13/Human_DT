

% close all
% clear

test_nums{3} = ["23"];
test_nums{4} = ["24"];
test_nums{5} = ["25"];
test_nums{6} = ["26"];

model_num = "26";

scale = '';

% leave control data: 0
% subtract off control: 1
% remove control data: 2
controls = [0 1 2]; 

step = 0.1;
score_opts = 0.1:step:1.3;
correct = zeros(size(score_opts));
total = zeros(size(score_opts));

[percent_correct_1,preds,classes,score] = SVM_test_model(test_nums{4},1,model_num,"1",scale);
scores = [];
scores_1 = [];

for i = 1:size(classes,2)
    if abs(score(i,1)) >= 1.5
        total(end) = total(end) + 1;
        if preds(i) == classes(i)
            correct(end) = correct(end) + 1;
            scores_1 = [scores_1,abs(score(i,1))];
        else
            scores = [scores,abs(score(i,1))];
        end
    else
        for j = 1:size(score_opts,2)
            if abs(score(i,1)) < (step * j)
                total(j) = total(j) + 1;
                if preds(i) == classes(i)
                    correct(j) = correct(j) + 1;
                    scores_1 = [scores_1,abs(score(i,1))];
                else
                    scores = [scores,abs(score(i,1))];
                end
                break
            end
        end
    end
end


[percent_correct_2,preds,classes,score] = SVM_test_model(test_nums{5},1,model_num,"1",scale);


for i = 1:size(classes,2)
    if abs(score(i,1)) >= 1.5
        total(end) = total(end) + 1;
        if preds(i) == classes(i)
            correct(end) = correct(end) + 1;
            scores_1 = [scores_1,abs(score(i,1))];
        else
            scores = [scores,abs(score(i,1))];
        end
    else
        for j = 1:size(score_opts,2)
            if abs(score(i,1)) < (step * j)
                total(j) = total(j) + 1;
                if preds(i) == classes(i)
                    correct(j) = correct(j) + 1;
                    scores_1 = [scores_1,abs(score(i,1))];
                else
                    scores = [scores,abs(score(i,1))];
                end
                break
            end
        end
    end
end

for i = 1:size(total,2)
    if total(i) == 0
        total(i) = 1;
    end
end
percent = correct./total;
incorrect = size(scores);
correct_1 = size(scores_1);
for i = 1:size(scores,2)
    if abs(scores(i)) >= 1.5
        incorrect(i) = percent(end); 
    else
        for j = 1:size(score_opts,2)
            if abs(scores(i)) < (step * j)
                incorrect(i) = percent(j);
                break
            end
        end
    end
end

for i = 1:size(scores_1,2)
    if abs(scores_1(i)) >= 1.5
        correct_1(i) = percent(end); 
    else
        for j = 1:size(score_opts,2)
            if abs(scores_1(i)) < (step * j)
                correct_1(i) = percent(j);
                break
            end
        end
    end
end

figure
C = [scores, incorrect, scores_1, correct_1];
grp = [zeros(size(scores)),ones(size(incorrect)),ones(size(scores_1))*2,ones(size(correct_1))*3];
boxplot(C,grp,"Labels", {'Scores: incorrect','Probabilities: incorrect','Scores: correct','Probabilities: correct'})
x0=10;
y0=10;
width=200;
height=400;
set(gcf,'position',[x0,y0,width,height])
ax = gca; 
ax.FontSize = 10; 
title('Quality-of-output metrics')

hold off

percent_correct = (percent_correct_1 + percent_correct_2)/2

avg_inc_scores = mean(scores)
avg_inc_prob = mean(incorrect)
mean(scores_1)
avg_cor_prob = mean(correct_1)




